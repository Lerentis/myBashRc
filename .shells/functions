# Handy Extract Program
function extract()      
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

# Get IP adress on ethernet.
function my_ip() 
{
    MY_IP=$(/sbin/ip addr | awk '/inet/ { print $2 } ' | 
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}


# Pretty-print of 'df' output.
# Inspired by 'dfc' utility.
function mydf()         
{                       
    for fs ; do
        if [ ! -d $fs ]
        then
          echo -e $fs" :No such file or directory" ; continue
        fi

        local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )
        local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )
        local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))
        local out="["
        for ((j=0;j<20;j++)); do
            if [ ${j} -lt ${nbstars} ]; then
               out=$out"*"
            else
               out=$out"-"
            fi
        done
        out=${info[2]}" "$out"] ("$free" free on "$fs")"
        echo -e $out
    done
}

# Get current host related info.
function ii()  
{
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; ss -s;
    echo
}

# Find a file with a pattern in name:
function ff() { find . -type f -iname '*'"$*"'*' -ls ; }

#git revent
function revert() { git reset --hard $1; }
# Git Commit
function commit() { git commit -m "$*" ;}

#Downloading full Website
function get_website() 
{ 
	wget --limit-rate=200k --no-clobber --convert-links --random-wait -r -p -E -e robots=off -U mozilla $1 ; 
}

#4chan Image Downloader

function 4chan() {

    if [ $# -ne 1 ]
    then
        echo 'No URL specified! Give the URL to thread as the ONLY argument'
        return 1
    fi

    url=$1

    grep 'boards\.4chan\.org/[a-z0-9]\{1,3\}/thread/[0-9]\{4,12\}.*' <<< $url 2>&1 > /dev/null
    exit_code=$?    # I know this isn't the best approach, but it's the best I can come up with.
    if [ $exit_code -ne 0 ]
    then
        echo 'Malformed URL! Give the URL to thread as the ONLY argument'
        return 2
    fi

    curl -k -f -s $url 2>&1 > /dev/null
    exit_code=$?    # I know this isn't the best approach, but it's the best I can come up with.
    if [ $exit_code -ne 0 ]
    then
        echo 'Invalid URL! Or you don`t have permission to view the page'
        return 3
    fi

    if [ $(grep '^http' <<< $url) ]    # If thread doesn't have any protocol, add https
    then
        :
    else
        url=$(sed 's/^/https:\/\//' <<< $url)
    fi

    if [ $(grep '^http:' <<< $url) ]
    then
        url=$(sed 's/^http\(.*\)$/https\1/' <<< $url)
    fi

    total=$(curl -k -s $url | grep -o 'File: <' | wc -l)
    counter=1

    for image_url in $(curl -k -s $url | grep -o '\/\/i\.4cdn\.org\/.\{1,3\}\/[0-9]\{6,15\}\.[a-z]\{3,4\}' | uniq | sed 's/^/https:/')
    do
        echo -n Downloading image $counter of $total...
        wget --no-check-certificate -q -nc $image_url
        echo ' Done'
        counter=$(($counter + 1))
    done
}

# Docker stop all container

function docker_stop()
{
	docker stop $(docker ps -a -q)
}

# Docker remove all images

function docker_remove()
{
	docker rm $(docker ps -a -q)
}

function docker_rmi()
{
    docker images -q |xargs docker rmi
}

function svn_fame()
{
    svn ls -R | egrep -v -e "\/$" | xargs svn blame | awk '{print $2}' | sort | uniq -c | sort -r
}